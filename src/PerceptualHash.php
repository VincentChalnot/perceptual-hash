<?php
declare(strict_types=1);

namespace Sidus\PerceptualHash;

use Intervention\Image\Image;

class PerceptualHash
{
    private const DCT_11_16 = [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0.99518473, 0.95694034, 0.88192126, 0.77301045, 0.63439328, 0.47139674, 0.29028468, 0.09801714, -0.09801714, -0.29028468, -0.47139674, -0.63439328, -0.77301045, -0.88192126, -0.95694034, -0.99518473],
        [0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528],
        [0.95694034, 0.63439328, 0.09801714, -0.47139674, -0.88192126, -0.99518473, -0.77301045, -0.29028468, 0.29028468, 0.77301045, 0.99518473, 0.88192126, 0.47139674, -0.09801714, -0.63439328, -0.95694034],
        [0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953, 0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953],
        [0.88192126, 0.09801714, -0.77301045, -0.95694034, -0.29028468, 0.63439328, 0.99518473, 0.47139674, -0.47139674, -0.99518473, -0.63439328, 0.29028468, 0.95694034, 0.77301045, -0.09801714, -0.88192126],
        [0.83146961, -0.19509032, -0.98078528, -0.55557023, 0.55557023, 0.98078528, 0.19509032, -0.83146961, -0.83146961, 0.19509032, 0.98078528, 0.55557023, -0.55557023, -0.98078528, -0.19509032, 0.83146961],
        [0.77301045, -0.47139674, -0.95694034, 0.09801714, 0.99518473, 0.29028468, -0.88192126, -0.63439328, 0.63439328, 0.88192126, -0.29028468, -0.99518473, -0.09801714, 0.95694034, 0.47139674, -0.77301045],
        [0.70710678, -0.70710678, -0.70710678, 0.70710678, 0.70710678, -0.70710678, -0.70710678, 0.70710678, 0.70710678, -0.70710678, -0.70710678, 0.70710678, 0.70710678, -0.70710678, -0.70710678, 0.70710678],
        [0.63439328, -0.88192126, -0.29028468, 0.99518473, -0.09801714, -0.95694034, 0.47139674, 0.77301045, -0.77301045, -0.47139674, 0.95694034, 0.09801714, -0.99518473, 0.29028468, 0.88192126, -0.63439328],
        [0.55557023, -0.98078528, 0.19509032, 0.83146961, -0.83146961, -0.19509032, 0.98078528, -0.55557023, -0.55557023, 0.98078528, -0.19509032, -0.83146961, 0.83146961, 0.19509032, -0.98078528, 0.55557023],
    ];
    private const DCT_11_32 = [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0.99879546, 0.98917651, 0.97003125, 0.94154407, 0.90398929, 0.85772861, 0.80320753, 0.74095113, 0.67155895, 0.5956993, 0.51410274, 0.42755509, 0.33688985, 0.24298018, 0.14673047, 0.04906767, -0.04906767, -0.14673047, -0.24298018, -0.33688985, -0.42755509, -0.51410274, -0.5956993, -0.67155895, -0.74095113, -0.80320753, -0.85772861, -0.90398929, -0.94154407, -0.97003125, -0.98917651, -0.99879546],
        [0.99518473, 0.95694034, 0.88192126, 0.77301045, 0.63439328, 0.47139674, 0.29028468, 0.09801714, -0.09801714, -0.29028468, -0.47139674, -0.63439328, -0.77301045, -0.88192126, -0.95694034, -0.99518473, -0.99518473, -0.95694034, -0.88192126, -0.77301045, -0.63439328, -0.47139674, -0.29028468, -0.09801714, 0.09801714, 0.29028468, 0.47139674, 0.63439328, 0.77301045, 0.88192126, 0.95694034, 0.99518473],
        [0.98917651, 0.90398929, 0.74095113, 0.51410274, 0.24298018, -0.04906767, -0.33688985, -0.5956993, -0.80320753, -0.94154407, -0.99879546, -0.97003125, -0.85772861, -0.67155895, -0.42755509, -0.14673047, 0.14673047, 0.42755509, 0.67155895, 0.85772861, 0.97003125, 0.99879546, 0.94154407, 0.80320753, 0.5956993, 0.33688985, 0.04906767, -0.24298018, -0.51410274, -0.74095113, -0.90398929, -0.98917651],
        [0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528, 0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528],
        [0.97003125, 0.74095113, 0.33688985, -0.14673047, -0.5956993, -0.90398929, -0.99879546, -0.85772861, -0.51410274, -0.04906767, 0.42755509, 0.80320753, 0.98917651, 0.94154407, 0.67155895, 0.24298018, -0.24298018, -0.67155895, -0.94154407, -0.98917651, -0.80320753, -0.42755509, 0.04906767, 0.51410274, 0.85772861, 0.99879546, 0.90398929, 0.5956993, 0.14673047, -0.33688985, -0.74095113, -0.97003125],
        [0.95694034, 0.63439328, 0.09801714, -0.47139674, -0.88192126, -0.99518473, -0.77301045, -0.29028468, 0.29028468, 0.77301045, 0.99518473, 0.88192126, 0.47139674, -0.09801714, -0.63439328, -0.95694034, -0.95694034, -0.63439328, -0.09801714, 0.47139674, 0.88192126, 0.99518473, 0.77301045, 0.29028468, -0.29028468, -0.77301045, -0.99518473, -0.88192126, -0.47139674, 0.09801714, 0.63439328, 0.95694034],
        [0.94154407, 0.51410274, -0.14673047, -0.74095113, -0.99879546, -0.80320753, -0.24298018, 0.42755509, 0.90398929, 0.97003125, 0.5956993, -0.04906767, -0.67155895, -0.98917651, -0.85772861, -0.33688985, 0.33688985, 0.85772861, 0.98917651, 0.67155895, 0.04906767, -0.5956993, -0.97003125, -0.90398929, -0.42755509, 0.24298018, 0.80320753, 0.99879546, 0.74095113, 0.14673047, -0.51410274, -0.94154407],
        [0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953, 0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953, 0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953, 0.92387953, 0.38268343, -0.38268343, -0.92387953, -0.92387953, -0.38268343, 0.38268343, 0.92387953],
        [0.90398929, 0.24298018, -0.5956993, -0.99879546, -0.67155895, 0.14673047, 0.85772861, 0.94154407, 0.33688985, -0.51410274, -0.98917651, -0.74095113, 0.04906767, 0.80320753, 0.97003125, 0.42755509, -0.42755509, -0.97003125, -0.80320753, -0.04906767, 0.74095113, 0.98917651, 0.51410274, -0.33688985, -0.94154407, -0.85772861, -0.14673047, 0.67155895, 0.99879546, 0.5956993, -0.24298018, -0.90398929],
        [0.88192126, 0.09801714, -0.77301045, -0.95694034, -0.29028468, 0.63439328, 0.99518473, 0.47139674, -0.47139674, -0.99518473, -0.63439328, 0.29028468, 0.95694034, 0.77301045, -0.09801714, -0.88192126, -0.88192126, -0.09801714, 0.77301045, 0.95694034, 0.29028468, -0.63439328, -0.99518473, -0.47139674, 0.47139674, 0.99518473, 0.63439328, -0.29028468, -0.95694034, -0.77301045, 0.09801714, 0.88192126],
    ];
    private const DCT_11_64 = [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0.99969882, 0.99729046, 0.99247953, 0.98527764, 0.97570213, 0.96377607, 0.94952818, 0.9329928, 0.91420976, 0.8932243, 0.87008699, 0.84485357, 0.81758481, 0.78834643, 0.75720885, 0.72424708, 0.68954054, 0.65317284, 0.61523159, 0.57580819, 0.53499762, 0.49289819, 0.44961133, 0.40524131, 0.35989504, 0.31368174, 0.26671276, 0.21910124, 0.17096189, 0.12241068, 0.07356456, 0.02454123, -0.02454123, -0.07356456, -0.12241068, -0.17096189, -0.21910124, -0.26671276, -0.31368174, -0.35989504, -0.40524131, -0.44961133, -0.49289819, -0.53499762, -0.57580819, -0.61523159, -0.65317284, -0.68954054, -0.72424708, -0.75720885, -0.78834643, -0.81758481, -0.84485357, -0.87008699, -0.8932243, -0.91420976, -0.9329928, -0.94952818, -0.96377607, -0.97570213, -0.98527764, -0.99247953, -0.99729046, -0.99969882],
        [0.99879546, 0.98917651, 0.97003125, 0.94154407, 0.90398929, 0.85772861, 0.80320753, 0.74095113, 0.67155895, 0.5956993, 0.51410274, 0.42755509, 0.33688985, 0.24298018, 0.14673047, 0.04906767, -0.04906767, -0.14673047, -0.24298018, -0.33688985, -0.42755509, -0.51410274, -0.5956993, -0.67155895, -0.74095113, -0.80320753, -0.85772861, -0.90398929, -0.94154407, -0.97003125, -0.98917651, -0.99879546, -0.99879546, -0.98917651, -0.97003125, -0.94154407, -0.90398929, -0.85772861, -0.80320753, -0.74095113, -0.67155895, -0.5956993, -0.51410274, -0.42755509, -0.33688985, -0.24298018, -0.14673047, -0.04906767, 0.04906767, 0.14673047, 0.24298018, 0.33688985, 0.42755509, 0.51410274, 0.5956993, 0.67155895, 0.74095113, 0.80320753, 0.85772861, 0.90398929, 0.94154407, 0.97003125, 0.98917651, 0.99879546],
        [0.99729046, 0.97570213, 0.9329928, 0.87008699, 0.78834643, 0.68954054, 0.57580819, 0.44961133, 0.31368174, 0.17096189, 0.02454123, -0.12241068, -0.26671276, -0.40524131, -0.53499762, -0.65317284, -0.75720885, -0.84485357, -0.91420976, -0.96377607, -0.99247953, -0.99969882, -0.98527764, -0.94952818, -0.8932243, -0.81758481, -0.72424708, -0.61523159, -0.49289819, -0.35989504, -0.21910124, -0.07356456, 0.07356456, 0.21910124, 0.35989504, 0.49289819, 0.61523159, 0.72424708, 0.81758481, 0.8932243, 0.94952818, 0.98527764, 0.99969882, 0.99247953, 0.96377607, 0.91420976, 0.84485357, 0.75720885, 0.65317284, 0.53499762, 0.40524131, 0.26671276, 0.12241068, -0.02454123, -0.17096189, -0.31368174, -0.44961133, -0.57580819, -0.68954054, -0.78834643, -0.87008699, -0.9329928, -0.97570213, -0.99729046],
        [0.99518473, 0.95694034, 0.88192126, 0.77301045, 0.63439328, 0.47139674, 0.29028468, 0.09801714, -0.09801714, -0.29028468, -0.47139674, -0.63439328, -0.77301045, -0.88192126, -0.95694034, -0.99518473, -0.99518473, -0.95694034, -0.88192126, -0.77301045, -0.63439328, -0.47139674, -0.29028468, -0.09801714, 0.09801714, 0.29028468, 0.47139674, 0.63439328, 0.77301045, 0.88192126, 0.95694034, 0.99518473, 0.99518473, 0.95694034, 0.88192126, 0.77301045, 0.63439328, 0.47139674, 0.29028468, 0.09801714, -0.09801714, -0.29028468, -0.47139674, -0.63439328, -0.77301045, -0.88192126, -0.95694034, -0.99518473, -0.99518473, -0.95694034, -0.88192126, -0.77301045, -0.63439328, -0.47139674, -0.29028468, -0.09801714, 0.09801714, 0.29028468, 0.47139674, 0.63439328, 0.77301045, 0.88192126, 0.95694034, 0.99518473],
        [0.99247953, 0.9329928, 0.81758481, 0.65317284, 0.44961133, 0.21910124, -0.02454123, -0.26671276, -0.49289819, -0.68954054, -0.84485357, -0.94952818, -0.99729046, -0.98527764, -0.91420976, -0.78834643, -0.61523159, -0.40524131, -0.17096189, 0.07356456, 0.31368174, 0.53499762, 0.72424708, 0.87008699, 0.96377607, 0.99969882, 0.97570213, 0.8932243, 0.75720885, 0.57580819, 0.35989504, 0.12241068, -0.12241068, -0.35989504, -0.57580819, -0.75720885, -0.8932243, -0.97570213, -0.99969882, -0.96377607, -0.87008699, -0.72424708, -0.53499762, -0.31368174, -0.07356456, 0.17096189, 0.40524131, 0.61523159, 0.78834643, 0.91420976, 0.98527764, 0.99729046, 0.94952818, 0.84485357, 0.68954054, 0.49289819, 0.26671276, 0.02454123, -0.21910124, -0.44961133, -0.65317284, -0.81758481, -0.9329928, -0.99247953],
        [0.98917651, 0.90398929, 0.74095113, 0.51410274, 0.24298018, -0.04906767, -0.33688985, -0.5956993, -0.80320753, -0.94154407, -0.99879546, -0.97003125, -0.85772861, -0.67155895, -0.42755509, -0.14673047, 0.14673047, 0.42755509, 0.67155895, 0.85772861, 0.97003125, 0.99879546, 0.94154407, 0.80320753, 0.5956993, 0.33688985, 0.04906767, -0.24298018, -0.51410274, -0.74095113, -0.90398929, -0.98917651, -0.98917651, -0.90398929, -0.74095113, -0.51410274, -0.24298018, 0.04906767, 0.33688985, 0.5956993, 0.80320753, 0.94154407, 0.99879546, 0.97003125, 0.85772861, 0.67155895, 0.42755509, 0.14673047, -0.14673047, -0.42755509, -0.67155895, -0.85772861, -0.97003125, -0.99879546, -0.94154407, -0.80320753, -0.5956993, -0.33688985, -0.04906767, 0.24298018, 0.51410274, 0.74095113, 0.90398929, 0.98917651],
        [0.98527764, 0.87008699, 0.65317284, 0.35989504, 0.02454123, -0.31368174, -0.61523159, -0.84485357, -0.97570213, -0.99247953, -0.8932243, -0.68954054, -0.40524131, -0.07356456, 0.26671276, 0.57580819, 0.81758481, 0.96377607, 0.99729046, 0.91420976, 0.72424708, 0.44961133, 0.12241068, -0.21910124, -0.53499762, -0.78834643, -0.94952818, -0.99969882, -0.9329928, -0.75720885, -0.49289819, -0.17096189, 0.17096189, 0.49289819, 0.75720885, 0.9329928, 0.99969882, 0.94952818, 0.78834643, 0.53499762, 0.21910124, -0.12241068, -0.44961133, -0.72424708, -0.91420976, -0.99729046, -0.96377607, -0.81758481, -0.57580819, -0.26671276, 0.07356456, 0.40524131, 0.68954054, 0.8932243, 0.99247953, 0.97570213, 0.84485357, 0.61523159, 0.31368174, -0.02454123, -0.35989504, -0.65317284, -0.87008699, -0.98527764],
        [0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528, 0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528, 0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528, 0.98078528, 0.83146961, 0.55557023, 0.19509032, -0.19509032, -0.55557023, -0.83146961, -0.98078528, -0.98078528, -0.83146961, -0.55557023, -0.19509032, 0.19509032, 0.55557023, 0.83146961, 0.98078528],
        [0.97570213, 0.78834643, 0.44961133, 0.02454123, -0.40524131, -0.75720885, -0.96377607, -0.98527764, -0.81758481, -0.49289819, -0.07356456, 0.35989504, 0.72424708, 0.94952818, 0.99247953, 0.84485357, 0.53499762, 0.12241068, -0.31368174, -0.68954054, -0.9329928, -0.99729046, -0.87008699, -0.57580819, -0.17096189, 0.26671276, 0.65317284, 0.91420976, 0.99969882, 0.8932243, 0.61523159, 0.21910124, -0.21910124, -0.61523159, -0.8932243, -0.99969882, -0.91420976, -0.65317284, -0.26671276, 0.17096189, 0.57580819, 0.87008699, 0.99729046, 0.9329928, 0.68954054, 0.31368174, -0.12241068, -0.53499762, -0.84485357, -0.99247953, -0.94952818, -0.72424708, -0.35989504, 0.07356456, 0.49289819, 0.81758481, 0.98527764, 0.96377607, 0.75720885, 0.40524131, -0.02454123, -0.44961133, -0.78834643, -0.97570213],
        [0.97003125, 0.74095113, 0.33688985, -0.14673047, -0.5956993, -0.90398929, -0.99879546, -0.85772861, -0.51410274, -0.04906767, 0.42755509, 0.80320753, 0.98917651, 0.94154407, 0.67155895, 0.24298018, -0.24298018, -0.67155895, -0.94154407, -0.98917651, -0.80320753, -0.42755509, 0.04906767, 0.51410274, 0.85772861, 0.99879546, 0.90398929, 0.5956993, 0.14673047, -0.33688985, -0.74095113, -0.97003125, -0.97003125, -0.74095113, -0.33688985, 0.14673047, 0.5956993, 0.90398929, 0.99879546, 0.85772861, 0.51410274, 0.04906767, -0.42755509, -0.80320753, -0.98917651, -0.94154407, -0.67155895, -0.24298018, 0.24298018, 0.67155895, 0.94154407, 0.98917651, 0.80320753, 0.42755509, -0.04906767, -0.51410274, -0.85772861, -0.99879546, -0.90398929, -0.5956993, -0.14673047, 0.33688985, 0.74095113, 0.97003125],
    ];

    /**
     * @return int[]
     */
    public function hash(Image $image, int $size = 32): array
    {
        if (!in_array($size, [16, 32, 64], true)) {
            throw new \InvalidArgumentException('Size must be 16, 32 or 64');
        }
        $sizeSqrt = sqrt(2 / $size);

        // Resize the image.
        $resized = $image->resize($size, $size);

        $matrix = [];
        $row = [];
        $rows = [];
        $col = [];

        $matrixSize = 11;

        for ($y = 0; $y < $size; $y++) {
            for ($x = 0; $x < $size; $x++) {
                $rgb = $resized->pickColor($x, $y)->toArray();
                $row[$x] = (int) floor(($rgb[0] * 0.299) + ($rgb[1] * 0.587) + ($rgb[2] * 0.114));
            }
            $rows[$y] = $this->calculateDCT($row, $matrixSize, $size, $sizeSqrt);
        }

        $rowMatrixSize = $matrixSize;

        for ($x = 0; $x < $matrixSize; $x++) {
            for ($y = 0; $y < $size; $y++) {
                $col[$y] = $rows[$y][$x];
            }
            $matrix[$x] = $this->calculateDCT($col, $rowMatrixSize, $size, $sizeSqrt);
            $rowMatrixSize--;
        }

        $pixels = $this->diagonalMatrix($matrix, $matrixSize);

        $pixels = array_slice($pixels, 1, 64); // discard first and cut to size

        $compare = $this->average($pixels);

        // Calculate hash.
        $bits = [];
        foreach ($pixels as $pixel) {
            $bits[] = ($pixel > $compare);
        }

        return $this->getIntegers($bits);
    }

    /**
     * Perform a 1 dimension Discrete Cosine Transformation.
     *
     * @param int[]|float[] $matrix
     *
     * @return float[]
     */
    private function calculateDCT(array $matrix, int $partialSize, int $size, float $sizeSqrt): array
    {
        $dctCos = $this->getDct11($size);
        $transformed = [];

        for ($i = 0; $i < $partialSize; $i++) {
            $sum = 0;
            for ($j = 0; $j < $size; $j++) {
                $sum += $matrix[$j] * $dctCos[$i][$j];
            }
            $sum *= $sizeSqrt;
            if ($i === 0) {
                $sum *= 0.70710678118655;
            }
            $transformed[$i] = $sum;
        }

        return $transformed;
    }

    /**
     * Get the diagonal matrix of the DCT.
     */
    private function diagonalMatrix(array $mat, int $size = 11): array
    {
        $mode = 0;
        $lower = 0;
        $result = [];
        $max = (ceil((($size * $size) / 2) + ($size * 0.5)));
        for ($t = 0; $t < (2 * $size - 1); $t++) {
            $t1 = $t;
            if ($t1 >= $size) {
                $mode++;
                $t1 = $size - 1;
                $lower++;
            } else {
                $lower = 0;
            }
            for ($i = $t1; $i >= $lower; $i--) {
                if (count($result) >= $max) {
                    return $result;
                }
                if (($t1 + $mode) % 2 === 0) {
                    $result[] = $mat[$i][$t1 + $lower - $i];
                } else {
                    $result[] = $mat[$t1 + $lower - $i][$i];
                }
            }
        }

        return $result;
    }

    /**
     * Get the average of the pixel values.
     */
    private function average(array $pixels): float
    {
        // Calculate the average value from top 8x8 pixels, except for the first one.
        $n = count($pixels) - 1;

        return array_sum(array_slice($pixels, 1, $n)) / $n;
    }

    /**
     * @return int[][]|float[][]
     */
    private function getDct11(int $size): array
    {
        if (16 === $size) {
            return self::DCT_11_16;
        }
        if (32 === $size) {
            return self::DCT_11_32;
        }
        if (64 === $size) {
            return self::DCT_11_64;
        }

        throw new \LogicException('$size must be 16, 32 or 64');
    }

    /**
     * Get the packed hash as an array of integers
     * 
     * @param bool[] $bits
     *
     * @return int[]
     */
    public function getIntegers(array $bits): array
    {
        $maxIntSize = PHP_INT_SIZE * 8; // Total bits per integer
        $numChunks = (int) ceil(count($bits) / $maxIntSize);
        $integers = [];
        for ($chunk = 0; $chunk < $numChunks; $chunk++) {
            $value = 0;
            for ($i = 0; $i < $maxIntSize; $i++) {
                $bitIndex = $chunk * $maxIntSize + $i;
                $bit = $bitIndex < count($bits) && $bits[$bitIndex];
                if ($bit) {
                    $value |= (1 << ($maxIntSize - 1 - $i));
                }
            }
            $integers[] = $value;
        }
        return $integers;
    }
}